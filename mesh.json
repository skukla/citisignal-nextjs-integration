{
  "meshConfig": {
    "sources": [
      {
        "name": "CommerceGraphQL",
        "handler": {
          "graphql": {
            "endpoint": "{env.ADOBE_COMMERCE_GRAPHQL_ENDPOINT}",
            "operationHeaders": {
              "Content-Type": "application/json",
              "Store": "{context.headers['store']}"
            }
          }
        },
        "transforms": [
          {
            "prefix": {
              "value": "Commerce_",
              "includeRootOperations": true
            }
          }
        ]
      },
      {
        "name": "CatalogServiceSandbox",
        "handler": {
          "graphql": {
            "endpoint": "{env.ADOBE_SANDBOX_CATALOG_SERVICE_ENDPOINT}",
            "operationHeaders": {
              "Content-Type": "application/json",
              "Magento-Environment-Id": "{context.headers['magento-environment-id']}",
              "Magento-Website-Code": "{context.headers['magento-website-code']}",
              "Magento-Store-View-Code": "{context.headers['magento-store-view-code']}",
              "Magento-Store-Code": "{context.headers['magento-store-code']}",
              "Magento-Customer-Group": "{context.headers['magento-customer-group']}",
              "X-Api-Key": "{context.headers['x-api-key']}",
              "Authorization": "{context.headers['Authorization']}"
            },
            "schemaHeaders": {
              "x-api-key": "{env.ADOBE_SANDBOX_CATALOG_API_KEY}"
            }
          }
        },
        "transforms": [
          {
            "prefix": {
              "value": "Catalog_",
              "includeRootOperations": true
            }
          }
        ],
        "responseConfig": {
          "headers": [
            "X-Magento-Cache-Id"
          ]
        }
      },
      {
        "name": "LiveSearchSandbox",
        "handler": {
          "graphql": {
            "endpoint": "{env.ADOBE_SANDBOX_CATALOG_SERVICE_ENDPOINT}",
            "operationHeaders": {
              "Content-Type": "application/json",
              "Magento-Environment-Id": "{context.headers['magento-environment-id']}",
              "Magento-Website-Code": "{context.headers['magento-website-code']}",
              "Magento-Store-View-Code": "{context.headers['magento-store-view-code']}",
              "Magento-Store-Code": "{context.headers['magento-store-code']}",
              "Magento-Customer-Group": "{context.headers['magento-customer-group']}",
              "X-Api-Key": "search_gql"
            },
            "schemaHeaders": {
              "x-api-key": "{env.ADOBE_SANDBOX_CATALOG_API_KEY}",
              "Magento-Environment-Id": "{env.ADOBE_COMMERCE_ENVIRONMENT_ID}",
              "Magento-Website-Code": "{env.ADOBE_COMMERCE_WEBSITE_CODE}",
              "Magento-Store-View-Code": "{env.ADOBE_COMMERCE_STORE_VIEW_CODE}",
              "Magento-Store-Code": "{env.ADOBE_COMMERCE_STORE_CODE}",
              "X-Api-Key": "search_gql"
            }
          }
        },
        "transforms": [
          {
            "prefix": {
              "value": "Search_",
              "includeRootOperations": true
            }
          }
        ]
      }
    ],
    "transforms": [
      {
        "filterSchema": {
          "mode": "wrap",
          "filters": [
            "Query.{Citisignal_*, Catalog_productSearch}",
            "Type.!Mutation"
          ]
        }
      }
    ],
    "additionalTypeDefs": "# Custom type extensions for Adobe API Mesh\n# These types extend the native Catalog Service types with computed fields\n\n# Extensions to existing Catalog Service types\nextend type Catalog_ComplexProductView {\n  manufacturer: String\n  memory_options: [String]\n  available_colors: [ColorOption]\n  formatted_options: [ProductOption]\n  is_on_sale: Boolean\n  display_price: Float\n  display_currency: String\n  discount_percentage: Float\n  in_stock: Boolean\n  specifications: [Specification]\n}\n\nextend type Catalog_SimpleProductView {\n  manufacturer: String\n  is_on_sale: Boolean\n  display_price: Float\n  display_currency: String\n  discount_percentage: Float\n  in_stock: Boolean\n  specifications: [Specification]\n}\n\n# Custom types for enhanced product data\ntype ColorOption {\n  name: String\n  hex: String\n}\n\ntype ProductOption {\n  id: String\n  title: String\n  required: Boolean\n  values: [OptionValue]\n}\n\ntype OptionValue {\n  id: String\n  title: String\n  value: String\n}\n\ntype Specification {\n  name: String\n  value: String\n}\n\n# Pagination support\ntype PageInfo {\n  current_page: Int\n  page_size: Int\n  total_pages: Int\n}\n\n# Product card type for listing pages\ntype ProductCard {\n  id: String\n  name: String\n  sku: String\n  manufacturer: String\n  display_price: Float\n  display_currency: String\n  is_on_sale: Boolean\n  discount_percentage: Float\n  in_stock: Boolean\n  image_url: String\n  specifications: [Specification]\n  memory_options: [String]\n  available_colors: [ColorOption]\n}\n\ntype ProductCardResult {\n  items: [ProductCard]\n  total_count: Int\n  page_info: PageInfo\n}\n\n# Custom filter input for simplified searching\ninput Citisignal_ProductFilter {\n  category: String\n  manufacturer: String\n  price_min: Float\n  price_max: Float\n  in_stock_only: Boolean\n  on_sale_only: Boolean\n}\n\n# Custom queries\nextend type Query {\n  Citisignal_productCards(\n    phrase: String\n    filter: Citisignal_ProductFilter\n    limit: Int = 20\n    page: Int = 1\n  ): ProductCardResult\n}",
    "additionalResolvers": [
      "./resolvers.js"
    ],
    "files": [
      {
        "path": "./utils.js",
        "content": "const cleanAttributeName = (name) => {\n    if (!name) return '';\n    // Remove cs_ prefix if present\n    return name.startsWith('cs_') ? name.substring(3) : name;\n  };\n  \n  const extractAttributeValue = (attributes, attributeName, defaultValue = '') => {\n    if (!attributes || !Array.isArray(attributes)) return defaultValue;\n    \n    // Look for both cs_ prefixed and clean versions\n    const csName = `cs_${attributeName}`;\n    const attr = attributes.find(a => \n      a.name === attributeName || \n      a.name === csName ||\n      cleanAttributeName(a.name) === attributeName\n    );\n    \n    return attr?.value || defaultValue;\n  };\n  \n  const extractPrice = (product) => {\n    const isComplex = product.__typename === 'Catalog_ComplexProductView';\n    return isComplex \n      ? product.priceRange?.minimum?.final?.amount?.value\n      : product.price?.final?.amount?.value;\n  };\n  \n  const extractCurrency = (product) => {\n    const isComplex = product.__typename === 'Catalog_ComplexProductView';\n    return isComplex \n      ? product.priceRange?.minimum?.final?.amount?.currency || 'USD'\n      : product.price?.final?.amount?.currency || 'USD';\n  };\n  \n  const extractRegularPrice = (product) => {\n    const isComplex = product.__typename === 'Catalog_ComplexProductView';\n    return isComplex \n      ? product.priceRange?.minimum?.regular?.amount?.value\n      : product.price?.regular?.amount?.value;\n  };\n  \n  const extractFinalPrice = (product) => {\n    const isComplex = product.__typename === 'Catalog_ComplexProductView';\n    return isComplex \n      ? product.priceRange?.minimum?.final?.amount?.value\n      : product.price?.final?.amount?.value;\n  };\n  \n  const isProductOnSale = (product) => {\n    const regular = extractRegularPrice(product);\n    const final = extractFinalPrice(product);\n    return isOnSale(regular, final);\n  };\n  \n  const getProductDiscountPercentage = (product) => {\n    const regular = extractRegularPrice(product);\n    const final = extractFinalPrice(product);\n    return calculateDiscountPercentage(regular, final);\n  };\n  \n  const extractSpecifications = (attributes) => {\n    if (!attributes) return [];\n    return attributes.map(attr => ({\n      name: attr.label || cleanAttributeName(attr.name),\n      value: attr.value\n    }));\n  };\n  \n  const extractOptionByTitle = (options, title) => {\n    if (!options) return null;\n    return options.find(opt => opt.title === title);\n  };\n  \n  const extractMemoryOptions = (options) => {\n    const memoryOption = extractOptionByTitle(options, 'Memory');\n    return memoryOption?.values?.map(v => v.title) || [];\n  };\n  \n  const extractColorOptions = (options) => {\n    const colorOption = extractOptionByTitle(options, 'Color');\n    return colorOption?.values?.map(v => ({\n      name: v.title,\n      hex: v.value || '#000000'\n    })) || [];\n  };\n  \n  const extractImageUrl = (images) => {\n    if (!images || !Array.isArray(images) || images.length === 0) return '';\n    \n    // First try to find an image with 'small' role\n    const smallImage = images.find(img => img.roles?.includes('small'));\n    if (smallImage?.url) return smallImage.url;\n    \n    // Fallback to first image if no small image found\n    return images[0]?.url || '';\n  };\n  \n  const isOnSale = (regularPrice, finalPrice) => {\n    return finalPrice < regularPrice;\n  };\n  \n  const calculateDiscountPercentage = (regularPrice, finalPrice) => {\n    if (!regularPrice || regularPrice <= 0) return 0;\n    if (!finalPrice || finalPrice >= regularPrice) return 0;\n    \n    const discount = ((regularPrice - finalPrice) / regularPrice) * 100;\n    return Math.round(discount * 10) / 10; // Round to 1 decimal place\n  };\n  \n  const buildCatalogFilters = (filter) => {\n    if (!filter) return [];\n    \n    const catalogFilters = [];\n    \n    if (filter.category) {\n      catalogFilters.push({\n        attribute: 'categoryPath',\n        in: [filter.category]\n      });\n    }\n    \n    if (filter.manufacturer) {\n      catalogFilters.push({\n        attribute: 'cs_manufacturer',\n        in: [filter.manufacturer]\n      });\n    }\n    \n    if (filter.price_min !== undefined || filter.price_max !== undefined) {\n      catalogFilters.push({\n        attribute: 'price',\n        range: {\n          from: filter.price_min || 0,\n          to: filter.price_max || 999999\n        }\n      });\n    }\n    \n    if (filter.in_stock_only) {\n      catalogFilters.push({\n        attribute: 'inStock',\n        eq: 'true'\n      });\n    }\n    \n    return catalogFilters;\n  };\n\nmodule.exports = {\n  cleanAttributeName,\n  extractAttributeValue,\n  extractPrice,\n  extractCurrency,\n  extractRegularPrice,\n  extractFinalPrice,\n  isProductOnSale,\n  getProductDiscountPercentage,\n  extractSpecifications,\n  extractOptionByTitle,\n  extractMemoryOptions,\n  extractColorOptions,\n  extractImageUrl,\n  isOnSale,\n  calculateDiscountPercentage,\n  buildCatalogFilters\n};"
      }
    ],
    "responseConfig": {
      "CORS": {
        "credentials": true,
        "exposedHeaders": [
          "Content-Range",
          "X-Content-Range",
          "X-Magento-Cache-Id"
        ],
        "maxAge": 60480,
        "methods": [
          "GET",
          "POST"
        ],
        "origin": "*"
      }
    }
  }
}